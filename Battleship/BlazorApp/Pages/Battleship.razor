@page "/battleship"
@using Game
@using Domain.Model
@using Domain.Model.Api
@using Domain
@using Domain.Tile
@using System.Text
<h3>Canvas</h3>
@inject IJSRuntime jsRuntime;
@implements IDisposable

@code {

    BaseBattleship game = new BlazorBattle(
        10,
        10,
        "1x5N1; 1x4N2; 1x3N3; 1x2N4",
        2,
        -1,
        -1
        );
    
    public TileData.CharInfo[,]? DrawArea = null;
    private DotNetObjectReference<Battleship>? dotNetHelper;
    
    public bool needToExit;
    public Input CleanInput = Input.GetDefaultInput();
    public ElementReference GameBoardDiv;  // set by the @ref attribute

    
    public double RunNextFrame(DateTime prevFrameTime)
    {
        double deltaTime = (DateTime.Now - prevFrameTime).TotalSeconds;
        game.GameData.Input = CleanInput;
        new BlazorUpdateLogic(game.GameData.Input).Update(deltaTime, game);
        DrawArea = BlazorDrawLogic.GetDraw(deltaTime, game.GameData);
        return deltaTime;
    }
    
    protected override Task OnInitializedAsync()
    {
        dotNetHelper = DotNetObjectReference.Create(this);
        return Task.CompletedTask;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await GameBoardDiv.FocusAsync();
            await jsRuntime.InvokeVoidAsync("runpixi");        
            // await jsRuntime.InvokeVoidAsync("JsFunctions.addKeyboardEventListener");
            
            var prevFrameTime = DateTime.Now;
            while (game.GameData.ElapsedTime < 9000 && !needToExit)
            {
                var deltaTime = RunNextFrame(prevFrameTime);
                prevFrameTime = prevFrameTime.AddSeconds(deltaTime);
                
                // await jsRuntime.InvokeVoidAsync("doNothing", new object[] { (object) System.Text.Json.JsonSerializer.Serialize(DrawArea!.ToJaggedArray())});
                var jaggedDraw = DrawArea!.ToJaggedArray();
                var drawArea = (from row in jaggedDraw select (from tile in row select tile.ToString()).ToList()).ToList();
                
                
                // await jsRuntime.InvokeVoidAsync("pixiMain2", dotNetHelper);
                // await jsRuntime.InvokeVoidAsync("printDate", dotNetHelper);
                await jsRuntime.InvokeVoidAsync("pixiMain", (object) drawArea, game.GameData.FrameCount == 1);
                Console.WriteLine(game.GameData.FrameCount);
                
                await Task.Delay(Math.Max(1000 / 60 - (int) (deltaTime * 1000), 1));
            }
        }

    }

    [JSInvokable]
    public string GetDrawArea()
    {
        var drawArea = (object) DrawArea!.ToJaggedArray();
        return System.Text.Json.JsonSerializer.Serialize(drawArea);
    }
    
    [JSInvokable]
    public string GetDate()
    {
        return $"{DateTime.Now.Hour}:{DateTime.Now.Minute}:{DateTime.Now.Second}, {DateTime.Now.Millisecond}";
    }


    public void KeyDown(KeyboardEventArgs e)
    {
        KeyEvent(e, true);
    }

    public void KeyUp(KeyboardEventArgs e)
    {
        KeyEvent(e, false);
    }

    public void FocusOut(FocusEventArgs e)
    {
        CleanInput = Input.GetDefaultInput();
    }

    public void KeyEvent(KeyboardEventArgs e, bool isKeyDown)
    {
        var supportedKeyboardEventCodes = (from x in Input.GetDefaultInput().Keyboard.KeyboardState select x.Identifier.Key).ToList();
        if (! supportedKeyboardEventCodes.Contains(e.Code))
        {
            return;
        }
        Console.WriteLine(e.Code);
        CleanInput.Keyboard.KeyboardState.Find(
            x => x.Identifier.Key == e.Code)!
            .Values = isKeyDown ?
                new List<Input.BtnState>()
                {
                    Input.BtnState.Pressed, Input.BtnState.Echo
                } :
                new List<Input.BtnState>()
                {
                    Input.BtnState.Released
                };
    }
    

    public void Dispose()
    {
        dotNetHelper?.Dispose();
        needToExit = true;
    }

}

<div class="main">
    <h2>Battleship</h2>
    <div>
        FrameCount: @game.GameData.FrameCount
    </div>


    
        @if(game.GameData.State == GameState.GameOver) 
        {
            <div>
                <h3>Game Over! @game.GameData.ActivePlayer.Name Won!</h3>
                <p style="text-align: center">
                    <a onclick="renderByName('StartMenu')">Try Again</a>
                </p>
            </div>
        } else {
            <h3>@game.GameData.ActivePlayer.Name turn</h3>
        }
    



        <form method="post">
            <!-- 
            class="canvas-container" -> class is targeted in js by pixi.js
            tabindex="0" -> otherwise focus can not be used
            @onkeydown="KeyDown" -> handle keyboard key presses 
            @onkeyup="KeyUp" -> handle keyboard key release, compliments onkeydown
            @onfocusout="FocusOut" -> used to set input to default when focus is lost
            @onkeydown:preventDefault -> disable browser built in keybinding. eg. down arrow scrolls page down
            @ref="GameBoardDiv" -> used to target this element to set focus to it in blazor
            -->
            <div class="canvas-container" tabindex="0" @onkeydown="KeyDown" @onkeyup="KeyUp" @onfocusout="FocusOut" @onkeydown:preventDefault @ref="GameBoardDiv">
            </div>
            <br/>
            <br/>

        </form>

</div>