@page "/battleship"
@using Game
@using Domain.Model
@using Domain.Model.Api
@using Domain
@using Domain.Tile
<h3>Canvas</h3>
@inject IJSRuntime jsRuntime;
@implements IDisposable

@code {

    BaseBattleship game = new BlazorBattle(
        10,
        10,
        "1x5N1; 1x4N2; 1x3N3; 1x2N4",
        2,
        -1,
        -1
        );
    
    public TileData.CharInfo[,]? DrawArea = null;
    
    public bool needToExit;
    public Input? CleanInput = null;
    public ElementReference GameBoardDiv;  // set by the @ref attribute

    
    public async void Run()
    {
        var prevFrameTime = DateTime.Now;
        while (game.GameData.ElapsedTime < 9000) {
            if (needToExit)
            {
                throw new Exception("Game exited!");
            }
            double deltaTime = (DateTime.Now - prevFrameTime).TotalSeconds;
            prevFrameTime = DateTime.Now;
            if (CleanInput != null && CleanInput.Keyboard.KeyboardState.Find(x => x.Identifier.Key == Input.KeyboardInput.KeyboardIdentifierList.ArrowUp.Key)!.Values.Count == 2)
            {
                Console.WriteLine("x: " + game.GameData.ActivePlayer.Sprite.Pos.X + " y:" + game.GameData.ActivePlayer.Sprite.Pos.Y);
            }
            game.GameData.Input = CleanInput ?? Input.KeyboardInput.KeyboardIdentifierList.GetDefaultInput();
            CleanInput = null;
            new BlazorUpdateLogic(game.GameData.Input).Update(deltaTime, game);
            DrawArea = BlazorDrawLogic.GetDraw(deltaTime, game.GameData);
            StateHasChanged();
            
            await Task.Delay(Math.Max(1000 / 60 - (int) (deltaTime * 1000), 1));
        }
    }
    
    protected override Task OnInitializedAsync()
    {
        DrawArea = BlazorDrawLogic.GetDraw(0.0f, game.GameData);
        Run();
        return Task.CompletedTask;
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            GameBoardDiv.FocusAsync();
            // await jsRuntime.InvokeVoidAsync("JsFunctions.addKeyboardEventListener");
        }
        jsRuntime.InvokeVoidAsync("getGameView", DrawArea.ToJaggedArray(), DrawArea.GetHeight(), DrawArea.GetWidth());
        return Task.CompletedTask;
    }

    public void KeyDown(KeyboardEventArgs e)
    {
        CleanInput = Input.GetDefaultInput();
        var supportedKeyboardEventCodes = (from x in Input.GetDefaultInput().Keyboard.KeyboardState select x.Identifier.Key).ToList();
        if (! supportedKeyboardEventCodes.Contains(e.Code))
        {
            return;
        }
        Console.WriteLine(e.Code);
        CleanInput.Keyboard.KeyboardState.Find(
            x => x.Identifier.Key == e.Code)!
            .Values = new List<Input.BtnState>()
            {
                Input.BtnState.Pressed, Input.BtnState.Echo
            };
    }

    public void Dispose()
    {
        needToExit = true;
    }

}

<div class="main">
    <h2>Battleship</h2>
    <div>
        FrameCount: @game.GameData.FrameCount
    </div>


    
        @if(game.GameData.State == GameState.GameOver) 
        {
            <div>
                <h3>Game Over! @game.GameData.ActivePlayer.Name Won!</h3>
                <p style="text-align: center">
                    <a onclick="renderByName('StartMenu')">Try Again</a>
                </p>
            </div>
        } else {
            <h3>@game.GameData.ActivePlayer.Name turn</h3>
        }
    



    <form method="post">
        <div class="container" tabindex="0" @onkeydown="KeyDown" @onkeydown:preventDefault @ref="GameBoardDiv">
            <div class="row">
                <div id="board" class="col capsizedText PressStart2PFont" style="font-size: 16px; line-height: 16px; padding: 0;">
                    
                </div>
            </div>
        </div>
        <br />
        <br />

    </form>

</div>