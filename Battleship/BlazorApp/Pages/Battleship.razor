@page "/battleship"
@using Game
@using Domain.Model
@using Domain.Model.Api
@using Domain
@using Domain.Tile
@using System.Text
@using System.Net.Mime
@using System.Numerics
@using System.Text.Json
<h3>Canvas</h3>
@inject IJSRuntime jsRuntime;
@implements IDisposable
@inject IJSUnmarshalledRuntime JSUnmarshalledRuntime

@code {

    BaseBattleship game = new BlazorBattle(
        10,
        10,
        "1x5N1; 1x4N2; 1x3N3; 1x2N4",
        2,
        -1,
        -1
        );
    
    public TileData.CharInfo[,]? DrawArea = null;
    private DotNetObjectReference<Battleship>? dotNetHelper;
    
    public bool needToExit;
    public Input CleanInput = Input.GetDefaultInput();
    public ElementReference GameBoardDiv;  // set by the @ref attribute

    
    public double RunNextFrame(DateTime prevFrameTime)
    {
        double deltaTime = (DateTime.Now - prevFrameTime).TotalSeconds;
        game.GameData.Input = CleanInput;
        new BlazorUpdateLogic(game.GameData.Input).Update(deltaTime, game);
        DrawArea = BlazorDrawLogic.GetDraw(deltaTime, game.GameData);
        return deltaTime;
    }
    
    protected override Task OnInitializedAsync()
    {
        dotNetHelper = DotNetObjectReference.Create(this);
        return Task.CompletedTask;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await GameBoardDiv.FocusAsync();
            var unmarshalledJs = (IJSUnmarshalledRuntime) JSUnmarshalledRuntime;
            unmarshalledJs.InvokeUnmarshalled<string>("runpixi");
            await Task.Delay(1000);
            // await jsRuntime.InvokeVoidAsync("runpixi");
            
            // await jsRuntime.InvokeVoidAsync("JsFunctions.addKeyboardEventListener");
            
            var prevFrameTime = DateTime.Now;
            while (game.GameData.ElapsedTime < 9000 && !needToExit)
            {
                var deltaTime = RunNextFrame(prevFrameTime);
                prevFrameTime = prevFrameTime.AddSeconds(deltaTime);
                
                // await jsRuntime.InvokeVoidAsync("doNothing", new object[] { (object) System.Text.Json.JsonSerializer.Serialize(DrawArea!.ToJaggedArray())});
                
                string drawDataString = "";
                List<List<string>> drawDataList = default!;
                var method = 5;
                TileData.CharInfo[][]? jaggedDraw;
                Func<bool, string> GetJsonUsingSB = (isfull) =>
                {
                    var sb = new StringBuilder();
                    sb.Append("[");
                    for (var i = 0; i < DrawArea.GetHeight(); i++)
                    {
                        sb.Append("[");
                        for (var j = 0; j < DrawArea.GetWidth(); j++)
                        {
                            var charInfo = DrawArea[i, j];

                            sb.Append(isfull ? $"[\"{charInfo.Glyph}\",\"{charInfo.Color.RgbR}\",\"{charInfo.Color.RgbG}\",\"{charInfo.Color.RgbB}\"]" : $"\"{charInfo.Glyph}\"");
                            
                            if (j != DrawArea.GetWidth() - 1)
                            {
                                sb.Append(",");
                            }
                        }
                        sb.Append("]");
                        if (i != DrawArea.GetHeight() - 1)
                        {
                            sb.Append(",");
                        }
                    }
                    sb.Append("]");
                    drawDataString = sb.ToString();
                    return drawDataString;
                };
                switch (method)
                {
                    case 1: // fps: 11
                        var s1 = GetJsonUsingSB(true);
                        await jsRuntime.InvokeVoidAsync("pixiMain", s1, game.GameData.FrameCount == 1, true, false);
                        break;
                    case 2: // fps: 26
                        var s2 = GetJsonUsingSB(false);
                        await jsRuntime.InvokeVoidAsync("pixiMain", s2, game.GameData.FrameCount == 1, true, false);
                        break;
                    case 3: // fps: 28
                        jaggedDraw = DrawArea!.ToJaggedArray();
                        drawDataList =(from row in jaggedDraw select (from tile in row select $"{tile.Glyph}").ToList()).ToList();
                        await jsRuntime.InvokeVoidAsync("pixiMain", drawDataList, game.GameData.FrameCount == 1, false, false);
                        break;
                    case 4: // fps: 22
                        jaggedDraw = DrawArea!.ToJaggedArray(); // fps: 67 => 62   
                        var x4 = (from row in jaggedDraw select (from tile in row select $"{tile.Glyph}").ToList()).ToList(); // fps: 62 => 39   
                        drawDataString = JsonSerializer.Serialize(x4);  // fps: 39 => 29
                        await jsRuntime.InvokeVoidAsync("pixiMain", drawDataString, game.GameData.FrameCount == 1, true, false); // fps: 29 => 22
                        break;
                    case 5: // fps: 38
                        jaggedDraw = DrawArea!.ToJaggedArray(); // fps: 66 => 62
                        
                        var outerList = new List<List<char>>();
                        foreach (var row in jaggedDraw)
                        {
                            var innerList = new List<char>();
                            outerList.Add(innerList);
                            // innerList.AddRange(row.Select(charInfo => charInfo.Glyph)); This is slower
                            foreach (var charInfo in row)
                            {
                                innerList.Add(charInfo.Glyph);
                            }
                        } // fps: 62 => 59
                        var start = BigInteger.Parse(await jsRuntime.InvokeAsync<string>("getTime"));
                        // await jsRuntime.InvokeVoidAsync("pixiMain", outerList, game.GameData.FrameCount == 1, false, false);  // fps: 59 => 38
                        var end = BigInteger.Parse(await jsRuntime.InvokeAsync<string>("getTime"));
                        Console.WriteLine(end - start);
                        break;
                    case 6: 
                        jaggedDraw = DrawArea!.ToJaggedArray(); // fps: 67 => 62   
                        var x6 = (from row in jaggedDraw select (from tile in row select $"{tile.Glyph}").ToList()).ToList(); // fps: 62 => 39   
                        drawDataString = JsonSerializer.Serialize(x6);  // fps: 39 => 29
                        unmarshalledJs.InvokeUnmarshalled<string, bool, string>("pixiMain", drawDataString, game.GameData.FrameCount == 1); // fps: 29 => 28
                        break;
                    default:
                        break;
                        // throw new NotImplementedException($"Method {method} not implemented!");
                }
                
                
                // await jsRuntime.InvokeVoidAsync("pixiMain2", dotNetHelper);
                // await jsRuntime.InvokeVoidAsync("printDate", dotNetHelper);
                // fps without drawing: 55
                // await jsRuntime.InvokeVoidAsync("pixiMain", (object) drawArea, game.GameData.FrameCount == 1);
                // await jsRuntime.InvokeVoidAsync("pixiMain", drawDataString, game.GameData.FrameCount == 1);
                
                // unmarshalledJs.InvokeUnmarshalled<string, bool, string>("pixiMain", (string) drawData,game.GameData.FrameCount == 1);
                // Console.WriteLine(game.GameData.FrameCount);

                var nDeltaTime = (int) Math.Floor(deltaTime * 1000);
                var delay = Math.Max(1000 / 60 - nDeltaTime, 1);
                await Task.Delay(delay);
            }
        }

    }

    [JSInvokable]
    public string GetDrawArea()
    {
        var drawArea = (object) DrawArea!.ToJaggedArray();
        return System.Text.Json.JsonSerializer.Serialize(drawArea);
    }
    
    [JSInvokable]
    public string GetDate()
    {
        return $"{DateTime.Now.Hour}:{DateTime.Now.Minute}:{DateTime.Now.Second}, {DateTime.Now.Millisecond}";
    }


    public void KeyDown(KeyboardEventArgs e)
    {
        KeyEvent(e, true);
    }

    public void KeyUp(KeyboardEventArgs e)
    {
        KeyEvent(e, false);
    }

    public void FocusOut(FocusEventArgs e)
    {
        CleanInput = Input.GetDefaultInput();
    }

    public void KeyEvent(KeyboardEventArgs e, bool isKeyDown)
    {
        var supportedKeyboardEventCodes = (from x in Input.GetDefaultInput().Keyboard.KeyboardState select x.Identifier.Key).ToList();
        if (! supportedKeyboardEventCodes.Contains(e.Code))
        {
            return;
        }
        var keyboardKey = CleanInput.Keyboard.KeyboardState.Find(
            x => x.Identifier.Key == e.Code)!;
        if (isKeyDown)
        {
            if (keyboardKey.IsDown())
            {
                keyboardKey.Value = Input.BtnState.Echo;
            }
            if (keyboardKey.IsReleased())
            {
                keyboardKey.Value = Input.BtnState.Pressed;
            }
        }
        else
        {
            keyboardKey.Value = Input.BtnState.Released;
        }
        Console.WriteLine($"{keyboardKey.Identifier.Key} {nameof(isKeyDown)}={isKeyDown}, " +
                          $"{nameof(keyboardKey.Value)}={keyboardKey.Value}");
        
    }
    

    public void Dispose()
    {
        dotNetHelper?.Dispose();
        needToExit = true;
    }

}

<div class="main">
    <h2>Battleship</h2>
    <div>
        FrameCount: @game.GameData.FrameCount, FPS: @(game.GameData.DeltaTimes.Count == 0 ? 0 : 1 / game.GameData.DeltaTimes.Average());
    </div>


    
        @if(game.GameData.State == GameState.GameOver) 
        {
            <div>
                <h3>Game Over! @game.GameData.ActivePlayer.Name Won!</h3>
                <p style="text-align: center">
                    <a onclick="renderByName('StartMenu')">Try Again</a>
                </p>
            </div>
        } else {
            <h3>@game.GameData.ActivePlayer.Name turn</h3>
        }
    



        <form method="post">
            <!-- 
            class="canvas-container" -> class is targeted in js by pixi.js
            tabindex="0" -> otherwise focus can not be used
            @onkeydown="KeyDown" -> handle keyboard key presses 
            @onkeyup="KeyUp" -> handle keyboard key release, compliments onkeydown
            @onfocusout="FocusOut" -> used to set input to default when focus is lost
            @onkeydown:preventDefault -> disable browser built in keybinding. eg. down arrow scrolls page down
            @ref="GameBoardDiv" -> used to target this element to set focus to it in blazor
            -->
            <div class="canvas-container" tabindex="0" @onkeydown="KeyDown" @onkeyup="KeyUp" @onfocusout="FocusOut" @onkeydown:preventDefault @ref="GameBoardDiv">
            </div>
            <br/>
            <br/>

        </form>

</div>