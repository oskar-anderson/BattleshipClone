@page "/tetris"
@using BlazorApp.Tetris;
@using BlazorApp.Pages.partials
@using BlazorApp.Tetris.Enums;
@using System.Diagnostics
@inject IJSRuntime jsRuntime;
@implements IDisposable

@* ReSharper disable MemberCanBePrivate.Global *@
@code {
    public GameData GameData = new GameData();

    bool needToExit;
    public static KeyboardEventArgs? KeyboardEventArgs = null;
    
    List<TetrominoStyle> nextTetrominos = new List<TetrominoStyle>();
    
    //The standard delay is how long the game waits before dropping the current tetromino by one row.
    int standardDelay = 1000;

    //This flag changes based on whether or not the user checks the "mute audio" checkbox.
    bool playAudio = true;

    public ElementReference GameBoardDiv;  // set by the @ref attribute

    protected override async Task OnInitializedAsync()
    {
        
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // await jsRuntime.InvokeVoidAsync("JsFunctions.addKeyboardEventListener");
        }
    }

    public async void NewGame()
    {
        GameData = new GameData();
        KeyboardEventArgs = null;
        nextTetrominos = new List<TetrominoStyle>();
        playAudio = true;
        await RunGame();
    }

    public async Task RunGame()
    {
        //Start playing the theme music
        if (playAudio)
        {
            await jsRuntime.InvokeAsync<string>("PlayAudio", "theme");
        }



        //Generate the styles of the first three tetrominos that will be dropped
        for (int i = 0; i < 3; i++)
        {
            nextTetrominos.Add(GameData.Generator.Next(nextTetrominos.ToArray()));
        }



        //Start playing the game
        GameData.Grid.State = GameState.Playing;

        await GameBoardDiv.FocusAsync();
        //Where there is no tetromino with a row of 21 or greater
        while (!GameData.Grid.Cells.HasRow(21)) //Game loop
        {
            //Create the next tetromino to be dropped from the already-determined nextStyle,
            //and move the styles "up" in line
            GameData.CurrentTetromino = GameData.Generator.CreateFromStyle(nextTetrominos.FirstOrDefault(), GameData.Grid.Width / 2, GameData.Grid.Height);
            nextTetrominos = nextTetrominos.GetRange(1, nextTetrominos.Count - 1);
            nextTetrominos.Add(GameData.Generator.Next(nextTetrominos.ToArray()));

            StateHasChanged();

            //Run the current tetromino until it can't move anymore
            await RunCurrentTetromino();

            //If any rows are filled, remove them from the board
            await ClearCompleteRows();

            //If the score is high enough, move the user to a new level
            LevelChange();
        }

        //Once there is a tetromino with a row of 21 or greater, the game is over.
        GameData.Grid.State = GameState.GameOver;
        ToggleAudio();
        StateHasChanged();
    }

    public void ToggleAudio()
    {
        playAudio = !playAudio;
        PlayAudio(playAudio);
    }

    public async void PlayAudio(bool on)
    {
        await jsRuntime.InvokeAsync<string>(on ? "PlayAudio" : "PauseAudio", "theme");
    }

    //Delays the game up to the passed-in amount of milliseconds in 50 millisecond intervals
    public async Task Delay(int millis)
    {
        var sw = Stopwatch.StartNew();
        while (sw.ElapsedMilliseconds < millis)
        {
            await Task.Delay(1);
            if (KeyboardEventArgs == null) continue;
            KeyDown(KeyboardEventArgs);
            KeyboardEventArgs = null;
        }
    }

    public async Task RunCurrentTetromino()
    {
        //While the tetromino can still move down
        while (GameData.CurrentTetromino!.CanMoveDown(GameData.Grid))
        {
            if (needToExit)
            {
                throw new Exception("Game exited!");
            }
            
            //Wait for the standard delay
            var beforeMovingTetrominoDown = async () =>
            {
                await Delay(standardDelay);
            };
            var sw = Stopwatch.StartNew();
            await beforeMovingTetrominoDown();
            sw.Stop();
            Console.WriteLine(sw.ElapsedMilliseconds);
            
            //Move the tetromino down one row
            GameData.CurrentTetromino.MoveDown(GameData.Grid);

            //Update the display
            StateHasChanged();

            //If the tetromino can no longer move down BUT can still move in other directions,
            //delay for an additional half-second to let the user move if they want.
            if (!GameData.CurrentTetromino.CanMoveDown(GameData.Grid))
            {
                await Delay(standardDelay / 2);
            }
            KeyboardEventArgs = null;
        }

        //"Solidify" the current tetromino by adding its covered squares to the board's cells
        GameData.Grid.Cells.AddTetromino(GameData.CurrentTetromino);
    }

    public void LevelChange()
    {
        //The user goes up a level for every 4000 points they score.
        int newLevel = GameData.Score / 4000;
        if(newLevel != GameData.Level) //If the user has gone up a level
        {
            //Reduce the drop delay by 100 milliseconds for every level the User has made.
            standardDelay = Math.Clamp(500 - newLevel * 100, 100, 500);

            //Set the new level
            GameData.Level = newLevel + 1;
        }
    }

    public async Task ClearCompleteRows()
    {
        //For each row
        List<int> rowsComplete = new List<int>();
        for (int i = 1; i <= GameData.Grid.Height; i++)
        {
            //If every position in that row is filled...
            if (GameData.Grid.Cells.GetAllInRow(i).Count == GameData.Grid.Width)
            {
                //Add the "complete" animation CSS class
                GameData.Grid.Cells.SetCssClass(i, "tetris-clear-row");

                //Mark that row as complete
                rowsComplete.Add(i);
            }
        }

        //If there are any complete rows
        if(rowsComplete.Any())
        {
            StateHasChanged();

            //Collapse the "higher" cells down to fill in the completed rows.
            GameData.Grid.Cells.CollapseRows(rowsComplete);

            //Calculate the score for the completed row(s)
            switch (rowsComplete.Count)
            {
                case 1:
                    GameData.Score += 40 * GameData.Level;
                    break;

                case 2:
                    GameData.Score += 100 * GameData.Level;
                    break;

                case 3:
                    GameData.Score += 300 * GameData.Level;
                    break;

                case 4:
                    GameData.Score += 1200 * GameData.Level;
                    break;
            }

            await Task.Delay(standardDelay / 2);
        }
        GameData.Grid.State = GameState.Playing;
    }
    
    protected void KeyDown(KeyboardEventArgs e)
    {
        Console.WriteLine($"keypress: {e.Key}");
        if (GameData.Grid.State == GameState.Playing)
        {
            if (GameData.CurrentTetromino == null)
            {
                throw new ArgumentException($"{nameof(GameData.CurrentTetromino)} cannot be null!");
            }
            var hasStateChanged = false;
            switch (e.Key)
            {
                case "ArrowRight":
                    if (GameData.CurrentTetromino.CanMoveRight(GameData.Grid))
                    {
                        GameData.CurrentTetromino.MoveRight(GameData.Grid);    
                        hasStateChanged = true;
                    }
                    break;
                case "ArrowLeft":
                    if (GameData.CurrentTetromino.CanMoveLeft(GameData.Grid))
                    {
                        GameData.CurrentTetromino.MoveLeft(GameData.Grid);    
                        hasStateChanged = true;
                    }
                    break;
                case "ArrowDown":
                case " ":
                {
                    int addToScore = GameData.CurrentTetromino.Drop(GameData.Grid);
                    GameData.Score += addToScore;
                    hasStateChanged = true;
                    break;
                }
                case "ArrowUp":
                    GameData.CurrentTetromino.Rotate();
                    hasStateChanged = true;
                    break;
                case "m":
                    ToggleAudio();
                    break;
            }
            if (hasStateChanged)
            {
                StateHasChanged();
            }
        }
    }
    
    /// <summary>
    /// Called by JavaScript when a Key Down event fires.
    /// </summary>
    [JSInvokable]
    public static void JsKeyDown(KeyboardEventArgs e)
    {
        KeyboardEventArgs = e;
    }
    
    public void Dispose()
    {
        needToExit = true;
    }
}
@* ReSharper restore MemberCanBePrivate.Global *@

<audio id="theme" src="./sounds/tetris-theme.ogg" preload="auto" loop="loop"></audio>

<div class="row">
    <div class="col">
        @if (GameData.Grid.State == GameState.NotStarted)
        {
            <button @onclick="RunGame" class="btn btn-primary">Start!</button>
        }
        @if (GameData.Grid.State == GameState.GameOver)
        {
            <button @onclick="NewGame" class="btn btn-primary">New Game!</button>
        }
        @if (GameData.Grid.IsStarted)
        {
            <label for="playAudio">
                <input id="playAudio" type="checkbox" @bind="playAudio" disabled />
                Play Music
            </label>
        }
    </div>
</div>

<div class="row">
    <div class="col">
        <div class="tetris-container" tabindex="0" @onkeydown="KeyDown" @onkeydown:preventDefault @ref="GameBoardDiv">
            @for (int i = GameData.Grid.Height; i >= 1; i--)
            {
                <div class="tetris-row">
                    @for (int j = 1; j <= GameData.Grid.Width; j++)
                    {
                        <TetrisGridCell Row="i" Column="j" Tetromino="GameData.CurrentTetromino" Grid="GameData.Grid" />
                    }
                </div>
            }
        </div>
    </div>
    <div class="col">
        @if(GameData.Grid.State == GameState.GameOver)
        {
            <h1>Game Over!</h1>
            <p>Thanks for playing!</p>
        }
        @if (GameData.Grid.IsStarted)
        {
            <div class="row">
                <div class="col">
                    <h2>Upcoming Pieces</h2>
                </div>
            </div>
            <TetrisTetrominoDisplay Style="nextTetrominos[0]" />
            <TetrisTetrominoDisplay Style="nextTetrominos[1]" />
            <TetrisTetrominoDisplay Style="nextTetrominos[2]" />
            <div class="row">
                <div class="col">
                    <h3>Controls</h3>
                    <span>&#8592;</span> / <span>&#8594;</span> Move Tetromino<br />
                    <span>&#8593;</span>: Rotate Tetromino<br />
                    <span>&#8595;</span> / <span>Space</span>: Drop Tetromino<br />
                    <span>M</span>: Toggle Audio
                </div>
            </div>
        }
    </div>
    <div class="col">
        <div class="row">
            <div class="col">
                <h2>Score: @GameData.Score</h2>
            </div>
        </div>
        <div class="row">
            <div class="col">
                <h2>Level: @GameData.Level</h2>
            </div>
        </div>
    </div>
</div>
