// <auto-generated />
using DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DAL.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DAL.DbGameData", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(36)")
                        .HasMaxLength(36);

                    b.Property<string>("ActivePlayerID")
                        .IsRequired()
                        .HasColumnType("nvarchar(36)");

                    b.Property<int>("AllowedPlacementType")
                        .HasColumnType("int");

                    b.Property<int>("BoardHeight")
                        .HasColumnType("int");

                    b.Property<int>("BoardWidth")
                        .HasColumnType("int");

                    b.Property<string>("DateCreated")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FrameCount")
                        .HasColumnType("int");

                    b.Property<string>("InactivePlayerID")
                        .IsRequired()
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Phase")
                        .HasColumnType("int");

                    b.Property<string>("ShipSizesDbFriendly")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WinningPlayer")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("ActivePlayerID");

                    b.HasIndex("InactivePlayerID");

                    b.ToTable("GameData");
                });

            modelBuilder.Entity("DAL.DbPlayerDTO", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(36)")
                        .HasMaxLength(36);

                    b.Property<string>("BoardDbFriendly")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsHorizontalPlacement")
                        .HasColumnType("bit");

                    b.Property<bool>("IsViewingOwnBoard")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PPlayerDbFriendly")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlayerType")
                        .HasColumnType("int");

                    b.Property<int>("ShipBeingPlacedIdx")
                        .HasColumnType("int");

                    b.Property<string>("ShipsDbFriendly")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShootingHistoryDbFriendly")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("fOffsetX")
                        .HasColumnType("real");

                    b.Property<float>("fOffsetY")
                        .HasColumnType("real");

                    b.Property<float>("fScaleX")
                        .HasColumnType("real");

                    b.Property<float>("fScaleY")
                        .HasColumnType("real");

                    b.Property<float>("fSelectedTileX")
                        .HasColumnType("real");

                    b.Property<float>("fSelectedTileY")
                        .HasColumnType("real");

                    b.HasKey("ID");

                    b.ToTable("Player");
                });

            modelBuilder.Entity("DAL.DbGameData", b =>
                {
                    b.HasOne("DAL.DbPlayerDTO", "ActivePlayer")
                        .WithMany()
                        .HasForeignKey("ActivePlayerID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DAL.DbPlayerDTO", "InactivePlayer")
                        .WithMany()
                        .HasForeignKey("InactivePlayerID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
