@page
@model WebApp.Pages.Battleship.Index

<head>
    <script src="~/js/mustache.js"></script>
</head>

<div id="mainBody"></div>

<script>



    function render(template, data = {}) {
        console.log(template);
      // let template = fetch(target).then(response => response.text());

        // decode html entities
        template = new DOMParser().parseFromString(template, "text/html").documentElement.textContent;
        console.log(template);

        // replace marked variables with values
        rendered = Mustache.render(template, data);
        console.log(rendered);

        let frag = parsePartialHtml(rendered);
        fixParsedScriptsToExecute(frag);
        document.getElementById('mainBody').appendChild(frag);

        // let jsExecuteTrick = document.createElement('div');
        // jsExecuteTrick.innerHTML = template;
        // document.getElementById('mainBody').innerHTML = template;
        // executeScripts();
    }

    render("@Model.StartMenuPartial");

    function executeScripts() {
        for (let script of Array.from(document.scripts)) {
            script.replaceWith(document.importNode(script, true), script);
            script.parentNode.replaceChild(script, script);
        }
    }

    function startNewGame() {
        render("@Model.NewGamePartial");
        let s1 = document.createElement('script');
        s1.innerHTML = "" +
            'var sliderHeight = document.getElementById("BoardHeight");' +
            'var outputHeight = document.getElementById("BoardHeightIndicator");' +
            'outputHeight.innerHTML = sliderHeight.value;' +
            'sliderHeight.oninput = function () { outputHeight.innerHTML = this.value; }';
        document.getElementById('mainBody').appendChild(s1);
        
    }

    /**
     *
     * @@param { string } html
     */
    function parsePartialHtml(html) {
        let doc = new DOMParser().parseFromString(html, "text/html")
        let frag = document.createDocumentFragment();

        if (doc.childNodes.length !== 0) {
            frag.appendChild(doc.childNodes[0]);
        } else {
            console.error('unexpected! doc.childNodes.length is ' + doc.childNodes.length);
        }
        return frag;
    }


    /**
     *
     * @@param { DocumentFragment } frag
     */
    function fixParsedScriptsToExecute(frag) {
        let scripts = frag.querySelectorAll('script');

        for (let i = 0; i < scripts.length; i++) {
            let script = scripts[i];
            let fixedScript = document.createElement('script');
            fixedScript.type = script.type;
            fixedScript.innerHTML = script.innerHTML;

            script.parentNode.replaceChild(fixedScript, script);
        }
    }

    // Start NewGamePartial
    class GameSettings {

        constructor(_boardHeight, _boardWidth, _allowedPlacementType, _ships) {
            this.BoardHeight = _boardHeight;
            this.BoardWidth = _boardWidth;
            this.AllowedPlacementType = _allowedPlacementType;
            this.Ships = _ships;
        }
    }

    async function launchGame() {
        let settings = getGameSettings();
        console.log(settings);
        let url = "https://" + window.location.host + "/api/Game/CheckValidGameSettings";
        let json = await checkGameSettingsValidity(settings, url);
        if (!json.areSettingsValid) {
            document.getElementById("rulesetError").innerHTML = json.errorMessage;
            return;
        }
        url = "https://" + window.location.host + "/api/Game/StartGame";
        json = await startGame(settings, url);
        render("/GameViewJs.txt", json);
    }

    function getGameSettings() {
        let height = parseInt(document.getElementById("BoardHeight").value);
        let width = parseInt(document.getElementById("BoardWidth").value);
        let allowedPlacementType = parseInt(document.getElementById("AllowedPlacementType").value);
        let ships = document.getElementById("Ships").value;

        let input = new GameSettings(height, width, allowedPlacementType, ships);
        return input;
    }

    async function checkGameSettingsValidity(input, url) {
        await console.log(url);
        return await fetch(url, {
            method: 'POST',
            body: JSON.stringify(input),
            headers: {
                'Content-Type': 'application/json'
            }
        }).then((response) => response.json()).
            then((data) => {
                console.log(data);
                return data;
            }).catch((err) => {
                console.error(err);
            });
    }

    async function startGame(input, url) {
        await console.log(url);
        return await fetch(url, {
            method: 'POST',
            body: JSON.stringify(input),
            headers: {
                'Content-Type': 'application/json'
            }
        }).then((response) => response.json()).
            then((data) => {
                console.log(data);
                return data;
            }).catch((err) => {
                console.error(err);
            });
    }

    // End NewGamePartial

</script>